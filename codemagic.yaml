workflows:
  ios_capacitor_testflight:
    name: iOS Capacitor TestFlight
    instance_type: mac_mini_m2
    max_build_duration: 60
    environment:
      groups:
        - appstore_credentials
      vars:
        APP_VERSION: "1.0.0"
        XCODE_WORKSPACE: "ios/App/App.xcworkspace"
        XCODE_SCHEME: "App"
        BUNDLE_ID: "com.apex.tradeline"
      xcode: "16.0"
      cocoapods: "default"
      node: "20.11.1"
      npm: "10"
    scripts:
      - name: Resolve version/build
        script: |
          set -euo pipefail
          : "${APP_VERSION:=1.0.0}"
          APP_BUILD="$(date +%y%m%d%H%M)"
          {
            echo "APP_VERSION=$APP_VERSION"
            echo "APP_BUILD=$APP_BUILD"
          } >> "$CM_ENV"
      - name: Install npm dependencies
        script: npm ci
      - name: Build web assets
        script: npm run build
      - name: Verify web build artifacts
        script: |
          #!/bin/bash
          set -euo pipefail
          if [ ! -f dist/index.html ]; then
            echo "Missing dist/index.html after npm run build" >&2
            exit 1
          fi
      - name: Sync Capacitor iOS wrapper
        script: |
          #!/bin/bash
          set -euo pipefail
          npx --yes cap sync ios
      - name: Verify iOS project exists
        script: |
          #!/bin/bash
          set -euo pipefail
          missing=0
          PROJECT_FILE="ios/App/App.xcodeproj/project.pbxproj"
          WORKSPACE_PATH="${XCODE_WORKSPACE}"
          if [ ! -f "$PROJECT_FILE" ]; then
            echo "Expected $PROJECT_FILE before running pod install" >&2
            echo "Run 'npx cap add ios' locally and commit the generated wrapper" >&2
            missing=1
          fi
          if [ ! -f "$WORKSPACE_PATH/contents.xcworkspacedata" ]; then
            echo "Expected $WORKSPACE_PATH/contents.xcworkspacedata before running pod install" >&2
            echo "Ensure the workspace is committed or regenerate it with 'npx cap sync ios'" >&2
            missing=1
          fi
          if [ "$missing" -ne 0 ]; then
            exit 1
          fi
      - name: Normalize Xcode configuration
        script: |
          #!/bin/bash
          set -euo pipefail
          WORKSPACE="${XCODE_WORKSPACE}"
          SCHEME="${XCODE_SCHEME}"
          BUNDLE="${BUNDLE_ID}"
          STORE_ID="${APP_STORE_ID:-}"

          echo "Using Xcode workspace: $WORKSPACE"
          echo "Using Xcode scheme: $SCHEME"
          echo "Using bundle identifier: $BUNDLE"
          if [ -z "$STORE_ID" ]; then
            echo "Warning: APP_STORE_ID not provided; TestFlight upload will succeed but App Store metadata sync is unavailable." >&2
          fi

          {
            printf 'XCODE_WORKSPACE=%s\n' "$WORKSPACE"
            printf 'XCODE_SCHEME=%s\n' "$SCHEME"
            printf 'BUNDLE_ID=%s\n' "$BUNDLE"
            printf 'APP_STORE_ID=%s\n' "$STORE_ID"
          } >> "$CM_ENV"
      - name: Resolve signing configuration
        script: |
          #!/bin/bash
          set -euo pipefail
          TEAM="${TEAM_ID:-${APPLE_TEAM_ID:-${DEVELOPMENT_TEAM:-}}}"
          KEY_ID="${APP_STORE_CONNECT_KEY_IDENTIFIER:-${APPSTORE_KEY_ID:-${APPSTORECONNECT_KEY_ID:-}}}"
          ISSUER="${APP_STORE_CONNECT_ISSUER_ID:-${APPSTORE_ISSUER_ID:-${APPSTORECONNECT_ISSUER_ID:-}}}"
          PRIVATE_KEY="${APP_STORE_CONNECT_PRIVATE_KEY:-${APPSTORE_PRIVATE_KEY:-${APPSTORECONNECT_PRIVATE_KEY:-}}}"

          missing=0
          if [ -z "$TEAM" ]; then
            echo "Missing required environment variable for Apple development team (TEAM_ID / APPLE_TEAM_ID / DEVELOPMENT_TEAM)." >&2
            missing=1
          fi
          if [ -z "$KEY_ID" ]; then
            echo "Missing App Store Connect API key identifier (APP_STORE_CONNECT_KEY_IDENTIFIER)." >&2
            missing=1
          fi
          if [ -z "$ISSUER" ]; then
            echo "Missing App Store Connect issuer identifier (APP_STORE_CONNECT_ISSUER_ID)." >&2
            missing=1
          fi
          if [ -z "$PRIVATE_KEY" ]; then
            echo "Missing App Store Connect private key (APP_STORE_CONNECT_PRIVATE_KEY)." >&2
            missing=1
          fi

          if [ "$missing" -ne 0 ]; then
            echo "Populate the Codemagic environment groups with the Apple signing credentials before retrying." >&2
            exit 1
          fi

          KEY_PATH="$CM_BUILD_DIR/appstore_key.p8"
          printf '%s\n' "$PRIVATE_KEY" > "$KEY_PATH"
          chmod 600 "$KEY_PATH"

          {
            printf 'SIGNING_TEAM=%s\n' "$TEAM"
            printf 'ASC_KEY_ID=%s\n' "$KEY_ID"
            printf 'ASC_ISSUER_ID=%s\n' "$ISSUER"
            printf 'ASC_KEY_PATH=%s\n' "$KEY_PATH"
          } >> "$CM_ENV"
      - name: Install CocoaPods dependencies
        script: |
          #!/bin/bash
          set -euo pipefail
          cd ios/App
          pod install
      - name: Prepare export options
        script: |
          cat <<'PLIST' > "$CM_BUILD_DIR/ExportOptions.plist"
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
            <dict>
              <key>method</key>
              <string>app-store</string>
              <key>signingStyle</key>
              <string>automatic</string>
              <key>stripSwiftSymbols</key>
              <true/>
              <key>uploadBitcode</key>
              <false/>
              <key>compileBitcode</key>
              <true/>
              <key>destination</key>
              <string>export</string>
              <key>manageAppVersionAndBuildNumber</key>
              <true/>
            </dict>
          </plist>
          PLIST
      - name: Archive iOS build
        script: |
          set -euo pipefail
          cd ios/App
          WORKSPACE="${XCODE_WORKSPACE}"
          SCHEME="${XCODE_SCHEME}"
          BUNDLE="${BUNDLE_ID}"
          WORKSPACE_NAME="$(basename "$WORKSPACE")"
          xcodebuild \
            -workspace "$WORKSPACE_NAME" \
            -scheme "$SCHEME" \
            -configuration Release \
            -sdk iphoneos \
            -archivePath "$CM_BUILD_DIR/App.xcarchive" \
            -allowProvisioningUpdates \
            DEVELOPMENT_TEAM="${SIGNING_TEAM}" \
            PRODUCT_BUNDLE_IDENTIFIER="$BUNDLE" \
            MARKETING_VERSION="$APP_VERSION" \
            CURRENT_PROJECT_VERSION="$APP_BUILD" \
            clean archive
      - name: Export IPA
        script: |
          set -euo pipefail
          xcodebuild \
            -exportArchive \
            -archivePath "$CM_BUILD_DIR/App.xcarchive" \
            -exportOptionsPlist "$CM_BUILD_DIR/ExportOptions.plist" \
            -exportPath "$CM_BUILD_DIR/export"
      - name: Upload to TestFlight
        script: |
          #!/bin/bash
          set -euo pipefail
          IPA_PATH="$(find "$CM_BUILD_DIR/export" -name '*.ipa' -print -quit)"
          if [ -z "$IPA_PATH" ]; then
            echo "No IPA produced at $CM_BUILD_DIR/export" >&2
            exit 1
          fi

          KEY_PATH="${ASC_KEY_PATH}"
          if [ ! -s "$KEY_PATH" ]; then
            echo "App Store Connect private key file missing at $KEY_PATH" >&2
            exit 1
          fi

          echo "Uploading $IPA_PATH to TestFlight via App Store Connect API key"
          xcrun altool \
            --upload-app \
            --type ios \
            --file "$IPA_PATH" \
            --apiKey "$ASC_KEY_ID" \
            --apiIssuer "$ASC_ISSUER_ID" \
            --apiKeyFile "$KEY_PATH"
    artifacts:
      - $CM_BUILD_DIR/App.xcarchive
      - $CM_BUILD_DIR/export/*.ipa
